datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  user_name         String
  email             String            @unique
  password          String
  email_verified    Boolean           @default(false)
  otp               Int?
  otp_created_at    DateTime?
  threads           Thread[]
  comments          Comment[]
  liked_threads     LikedThread[]
  disliked_threads  DislikedThread[]
  liked_comments    LikedComment[]
  disliked_comments DislikedComment[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Thread {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String?          @db.ObjectId
  user        User?            @relation(fields: [user_id], references: [id])
  heading     String
  content     String
  likes       Int              @default(0)
  dislikes    Int              @default(0)
  comments    Comment[]
  liked_by    LikedThread[]
  disliked_by DislikedThread[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model LikedThread {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String?  @db.ObjectId
  user      User?    @relation(fields: [user_id], references: [id])
  thread_id String?  @db.ObjectId
  thread    Thread?  @relation(fields: [thread_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DislikedThread {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String?  @db.ObjectId
  user      User?    @relation(fields: [user_id], references: [id])
  thread_id String?  @db.ObjectId
  thread    Thread?  @relation(fields: [thread_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  user        User?             @relation(fields: [user_id], references: [id])
  user_id     String?           @db.ObjectId
  thread      Thread?           @relation(fields: [thread_id], references: [id])
  thread_id   String?           @db.ObjectId
  content     String
  likes       Int               @default(0)
  dislikes    Int               @default(0)
  comment_id  String?           @db.ObjectId
  comment     Comment?          @relation("commentsOnThisComment", fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments    Comment[]         @relation("commentsOnThisComment")
  liked_by    LikedComment[]
  disliked_by DislikedComment[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model DislikedComment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String?  @db.ObjectId
  user       User?    @relation(fields: [user_id], references: [id])
  comment_id String?  @db.ObjectId
  comment    Comment? @relation(fields: [comment_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LikedComment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String?  @db.ObjectId
  user       User?    @relation(fields: [user_id], references: [id])
  comment_id String?  @db.ObjectId
  comment    Comment? @relation(fields: [comment_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

